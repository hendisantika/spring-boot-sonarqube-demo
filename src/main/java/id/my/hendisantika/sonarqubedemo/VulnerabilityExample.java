package id.my.hendisantika.sonarqubedemo;

import org.json.JSONObject;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

/**
 * Created by IntelliJ IDEA. Project : spring-boot-sonarqube-demo User: hendisantika Link:
 * s.id/hendisantika Email: hendisantika@yahoo.co.id Telegram : @hendisantika34 Date: 16/03/25 Time:
 * 09.49 To change this template use File | Settings | File Templates.
 */
public class VulnerabilityExample {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/mydb";
    private static final String DB_USER = "admin";
    private static final String DB_PASSWORD = "Password123!";

    public JSONObject getJson() {
        var jsonObject = new JSONObject();
        jsonObject.put("name", "value");
        return jsonObject;
    }

    // Vulnerability 1: SQL Injection
    public String getUserData(String userId) {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            Statement stmt = conn.createStatement();

            // SQL Injection vulnerability
            String sql = "SELECT * FROM users WHERE id = " + userId;
            ResultSet rs = stmt.executeQuery(sql);

            StringBuilder result = new StringBuilder();
            while (rs.next()) {
                result.append(rs.getString("username")).append(": ").append(rs.getString("data"));
            }

            rs.close();
            stmt.close();
            conn.close();

            return result.toString();
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    // Vulnerability 2: Cross-Site Scripting (XSS)
    public String displayUserInput(String userInput) {
        // No escaping of user input
        return "<div>" + userInput + "</div>";
    }

    // Vulnerability 3: Path Traversal
    public String readFile(String fileName) {
        try {
            File file = new File("/var/data/" + fileName);
            FileInputStream fis = new FileInputStream(file);
            byte[] data = new byte[(int) file.length()];
            fis.read(data);
            fis.close();
            return new String(data, StandardCharsets.UTF_8);
        } catch (IOException e) {
            return "Error: " + e.getMessage();
        }
    }

    // Vulnerability 4: Zip Slip
    public void extractZip(String zipFilePath, String destinationDir) {
        try {
            FileInputStream fis = new FileInputStream(zipFilePath);
            ZipInputStream zis = new ZipInputStream(fis);
            ZipEntry entry;

            while ((entry = zis.getNextEntry()) != null) {
                String fileName = entry.getName();
                // No validation of zip entry paths
                File newFile = new File(destinationDir, fileName);

                // Create directories
                new File(newFile.getParent()).mkdirs();

                // Extract file
                byte[] buffer = new byte[1024];
                int len;
                java.io.FileOutputStream fos = new java.io.FileOutputStream(newFile);
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }
                fos.close();
            }

            zis.closeEntry();
            zis.close();
            fis.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Vulnerability 5: XML External Entity (XXE)
    public String parseXml(String xml) {
        try {
            javax.xml.parsers.DocumentBuilderFactory factory =
                    javax.xml.parsers.DocumentBuilderFactory.newInstance();
            // XXE vulnerability - not disabling external entities
            javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();
            org.w3c.dom.Document doc = builder.parse(new java.io.ByteArrayInputStream(xml.getBytes()));
            return doc.getDocumentElement().getTextContent();
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    // Vulnerability 6: Insecure Deserialization
    public Object deserialize(byte[] data) {
        try {
            java.io.ByteArrayInputStream bis = new java.io.ByteArrayInputStream(data);
            java.io.ObjectInputStream ois = new java.io.ObjectInputStream(bis);
            // Insecure deserialization
            Object obj = ois.readObject();
            ois.close();
            return obj;
        } catch (Exception e) {
            return null;
        }
    }

    // Vulnerability 7: Command Injection
    public String executeCommand(String command) {
        try {
            Process process = Runtime.getRuntime().exec(command);
            java.io.BufferedReader reader =
                    new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()));

            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }

            process.waitFor();
            reader.close();

            return output.toString();
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    // Vulnerability 8: Insecure Redirect
    public String redirectUser(String url) {
        // No validation of URL
        return "redirect:" + url;
    }
}
